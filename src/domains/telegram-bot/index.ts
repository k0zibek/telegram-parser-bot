import { Context, Markup, Telegraf } from 'telegraf'
import { UserData } from '../../data/user'

export class TelegramBot {
    private bot: Telegraf<Context>;

    constructor(apiToken: string) {
        this.bot = new Telegraf(apiToken)
    }

    public init() {
        const commands = [
            { command: 'help', description: '–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç' },
        ];

        this.bot
            .launch()
            .then(() => {
                console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.');
            }).catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
            });
        this.bot
            .command('start', async (ctx) => {
            this.bot.telegram.sendMessage(ctx.chat.id, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${ctx.from.first_name}! –û–∂–∏–¥–∞–π—Ç–µ –∏–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–πüîé`);
            if(!await UserData.findOne({ 
                chatId: String(ctx.from.id) 
            })) {
                await UserData.save({
                    firstName: ctx.from.first_name,
                    username: ctx.from.username !== undefined ? ctx.from.username : '',
                    chatId: String(ctx.from.id)
                });
            }
        });
        this.bot
            .command('help', async (ctx) => {
                this.bot.telegram.sendMessage(ctx.chat.id,
                    `–ë–æ—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∞–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ krisha.kz –≤ –≥–æ—Ä–æ–¥–∞—Ö –ê—Å—Ç–∞–Ω–∞, –ê–ª–º–∞—Ç—ã –∏ –®—ã–º–∫–µ–Ω—Ç`);
            });
    }

    async sendMessage(chatId: number, message: string): Promise<void> {
        try {
            await this.bot.telegram.sendMessage(chatId, message);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
    }

    getMessage(callback: (ctx: Context) => void): void {
        this.bot.on('message', callback);
    }
}
